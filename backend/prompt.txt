このチャットでは日本語で入出力をし、英語で思考すること。

#####################################################

# Flaskを用いたバックエンド処理用RESTfull API

現在フロントエンドにReact、バックエンドにFlaskを利用したWEBアプリを作成している。
バックエンドではFlaskをRESTfull APIとして動作させる予定である。

## そこで以下の要件を満たすFlaskのサーバーを作成せよ。

### まずサーバーが要求される機能を記述する。
- データベースでのレコードの作成、更新、削除、読みこみ（いわゆるCRUD機能）
- ログイン機能/ユーザー登録機能

### 実装の詳細な指示を記述する。
- まず動作確認をしたいため、データベースへのアクセス処理など実際の処理の部分はコメントアウトして、クライアントへjsonを送受信する機能だけ有効にしておくこと
- データベースに関する機能は react_hello/backend/db/ 下に作成すること
- ログインとユーザ登録に関する機能は react_hello/backend/auth/ 下に作成すること


# authentication.pyとdatabase.pyのリファクタリング
認証関連の処理とデータベース関連の処理をモジュール化してリクエストの処理をする部分はserver.pyにまとめて記述するようにしたい。
ただし以下の要件を満たすこと。
- server.pyはリクエストの処理のみを行う。リクエストの処理方法に関しては後述する。
- 例えば現在/db/read/123へ送られるGETリクエストはdatabase.pyが直接処理しているが、新たな仕様ではdatabase.pyは関数の引数としてid(ここでは123)を受け取り、対応するデータのjsonを返り値として返すものとする。
- POSTなどの場合も同様でdatabase.pyは関数の引数としてjsonを受け取り、返り値としてデータのjsonを返すものとする。
- 現在と同様に返すデータはデータベースに実際にアクセスするのではなくダミーデータを返せばよい。
- authentication.pyでも同様でjsonを関数の引数として受け取り、返り値としてjsonを返す。authentication.pyに関しては現在の実装通りFirebase Authを利用する形でよい。
- server.pyでは上記のdatabase.py及びauthentication.pyの関数の引数に合うようにリクエストを処理して関数の引数に渡し、返り値をそのまま返すものとする。
- app.pyはサーバー起動ファイルとして残し、server.pyはルーティングファイルとしてapp.pyとは別に作成すること。


# db/readのリファクタリング
データベースの読み取り処理に使用する読み取りパラメータをURLのパスによる指定からGETリクエストパラメータで指定するように変更せよ。
ただし以下の要件を満たすこと。

- パラメータとしてはFirestoreのコレクション名とドキュメントIDを受け取る。
- 拡張性のためにモジュールの関数へ渡す引数はパラメータのリストを渡す。


# db/update及びdb/deleteのリファクタリング
上記の二つでURLで指定している箇所をパラメータなどで指定するようにリファクタリングせよ。
ただしそれぞれ以下の条件を満たすこと。

## db/update
- URLで指定しているID部分もjsonで受け取るように変更すること。

## db/delete
- db/readで行っているようにDELETEリクエストパラメータで指定すること。
- db/readで行っているように辞書を引数としてモジュールに渡すこと。


# db/createのリファクタリング
db/createとdb/updateでコレクション名もjsonから指定するようにせよ